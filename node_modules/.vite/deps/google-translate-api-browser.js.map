{
  "version": 3,
  "sources": ["../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/webpack/bootstrap", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/webpack/runtime/define property getters", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/webpack/runtime/hasOwnProperty shorthand", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/defaultTranslateOptions.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/generateRequestUrl.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/languages.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/isLanguageSupported.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/normaliseResponse.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/createRequestBody.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/translate.browser.ts", "../../google-translate-api-browser/dest/browser/webpack:/google-translate-api-browser/src/index.browser.ts"],
  "sourcesContent": ["// The require scope\nvar __webpack_require__ = {};\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "import { TranslateOptions } from \"./types/TranslateOptions\";\n\nexport const defaultTranslateOptions: TranslateOptions = {\n  from: \"auto\",\n  to: \"en\",\n  hl: \"en\", // Host language\n  tld: \"com\",\n  rpcids: \"MkEWBc\",\n};\n", "import { defaultTranslateOptions } from \"./defaultTranslateOptions\";\nimport { GenerateRequestUrlOptions } from \"./types/GenerateRequestUrlOptions\";\n\nfunction validateTLD(tld: string): boolean {\n  return Boolean(tld.match(/^[a-zA-Z]{2,63}$/));\n}\n\nexport function generateRequestUrl({\n  rpcids = defaultTranslateOptions.rpcids,\n  hl = defaultTranslateOptions.hl,\n  tld = defaultTranslateOptions.tld,\n}: GenerateRequestUrlOptions = {}): string {\n  if (!validateTLD(tld)) {\n    throw new Error(\"Invalid TLD: Must be 2-63 letters only\");\n  }\n\n  const searchParams = new URLSearchParams({\n    rpcids: rpcids,\n    \"source-path\": \"/\",\n    hl: hl,\n    \"soc-app\": \"1\",\n    \"soc-platform\": \"1\",\n    \"soc-device\": \"1\",\n  });\n\n  return `https://translate.google.${tld}/_/TranslateWebserverUi/data/batchexecute?${searchParams}`;\n}\n", "const langs = {\n  auto: \"Automatic\",\n  af: \"Afrikaans\",\n  sq: \"Albanian\",\n  am: \"Amharic\",\n  ar: \"Arabic\",\n  hy: \"Armenian\",\n  az: \"Azerbaijani\",\n  eu: \"Basque\",\n  be: \"Belarusian\",\n  bn: \"Bengali\",\n  bs: \"Bosnian\",\n  bg: \"Bulgarian\",\n  ca: \"Catalan\",\n  ceb: \"Cebuano\",\n  ny: \"Chichewa\",\n  zh: \"Chinese Simplified\",\n  \"zh-cn\": \"Chinese Simplified\",\n  \"zh-tw\": \"Chinese Traditional\",\n  co: \"Corsican\",\n  hr: \"Croatian\",\n  cs: \"Czech\",\n  da: \"Danish\",\n  nl: \"Dutch\",\n  en: \"English\",\n  'en-US': \"English\",\n  eo: \"Esperanto\",\n  et: \"Estonian\",\n  tl: \"Filipino\",\n  fi: \"Finnish\",\n  fr: \"French\",\n  fy: \"Frisian\",\n  gl: \"Galician\",\n  ka: \"Georgian\",\n  de: \"German\",\n  el: \"Greek\",\n  gu: \"Gujarati\",\n  ht: \"Haitian Creole\",\n  ha: \"Hausa\",\n  haw: \"Hawaiian\",\n  he: \"Hebrew\",\n  iw: \"Hebrew\",\n  hi: \"Hindi\",\n  hmn: \"Hmong\",\n  hu: \"Hungarian\",\n  is: \"Icelandic\",\n  ig: \"Igbo\",\n  id: \"Indonesian\",\n  ga: \"Irish\",\n  it: \"Italian\",\n  ja: \"Japanese\",\n  jw: \"Javanese\",\n  kn: \"Kannada\",\n  kk: \"Kazakh\",\n  km: \"Khmer\",\n  rw: \"Kinyarwanda\",\n  ko: \"Korean\",\n  ku: \"Kurdish (Kurmanji)\",\n  ky: \"Kyrgyz\",\n  lo: \"Lao\",\n  la: \"Latin\",\n  lv: \"Latvian\",\n  lt: \"Lithuanian\",\n  lb: \"Luxembourgish\",\n  mk: \"Macedonian\",\n  mg: \"Malagasy\",\n  ms: \"Malay\",\n  ml: \"Malayalam\",\n  mt: \"Maltese\",\n  mi: \"Maori\",\n  mr: \"Marathi\",\n  mn: \"Mongolian\",\n  my: \"Myanmar (Burmese)\",\n  ne: \"Nepali\",\n  no: \"Norwegian\",\n  or: \"Odia (Oriya)\",\n  ps: \"Pashto\",\n  fa: \"Persian\",\n  pl: \"Polish\",\n  pt: \"Portuguese\",\n  pa: \"Punjabi\",\n  ro: \"Romanian\",\n  ru: \"Russian\",\n  sm: \"Samoan\",\n  gd: \"Scots Gaelic\",\n  sr: \"Serbian\",\n  st: \"Sesotho\",\n  sn: \"Shona\",\n  sd: \"Sindhi\",\n  si: \"Sinhala\",\n  sk: \"Slovak\",\n  sl: \"Slovenian\",\n  so: \"Somali\",\n  es: \"Spanish\",\n  su: \"Sundanese\",\n  sw: \"Swahili\",\n  sv: \"Swedish\",\n  tg: \"Tajik\",\n  ta: \"Tamil\",\n  tt: \"Tatar\",\n  te: \"Telugu\",\n  th: \"Thai\",\n  tr: \"Turkish\",\n  tk: \"Turkmen\",\n  uk: \"Ukrainian\",\n  ur: \"Urdu\",\n  ug: \"Uyghur\",\n  uz: \"Uzbek\",\n  vi: \"Vietnamese\",\n  cy: \"Welsh\",\n  xh: \"Xhosa\",\n  yi: \"Yiddish\",\n  yo: \"Yoruba\",\n  zu: \"Zulu\",\n} as const;\n\nexport default langs;\n", "import langs from \"./languages\";\nimport { LangKey } from \"./types/LangKey\";\n\nexport const isLanguageSupported = (desiredLang: LangKey): boolean => {\n  return Boolean(langs[desiredLang]);\n};\n", "import { RawContentType, RawTranslationResponse, TranslationResult } from \"./types/TranslationResult\";\n\nfunction parseData(data: string) {\n  try {\n    const content: RawContentType = JSON.parse(data.replace(/^\\)]}'/, \"\"));\n    const translationResponse: RawTranslationResponse = JSON.parse(content[0][2]);\n\n    return translationResponse;\n  } catch (e) {\n    throw new Error(\"Data is either empty or corrupted\");\n  }\n}\n\nexport function normaliseResponse(rawBody: string, raw = false): TranslationResult {\n  const data = parseData(rawBody);\n  const translatedPhrases = data[1][0][0][5];\n  const text = translatedPhrases.reduce<string>((fullText, [textBlock]) => {\n    return fullText ? `${fullText} ${textBlock}` : textBlock;\n  }, \"\");\n\n  const result: TranslationResult = {\n    text,\n    pronunciation: data[1][0][0][1],\n    from: {\n      language: {\n        didYouMean: Boolean(data[0][1]),\n        iso: data[2]\n      },\n      text: {\n        pronunciation: data[0][0],\n        autoCorrected: Boolean(data[0][1]),\n        value: data[0][6][0],\n        didYouMean: data[0][1] ? data[0][1][0][4] : null\n      }\n    }\n  };\n\n  if (raw) {\n    result.raw = data;\n  }\n\n  return result;\n}\n", "import { defaultTranslateOptions } from \"./defaultTranslateOptions\";\nimport { CreateRequestBodyOptions } from \"./types/CreateRequestBodyOptions\";\n\nfunction escapeSpecialSymbols(inputString: string): string {\n  const escapedString = inputString.replace(/[\"]/g, \"\\\\\\\\\\\\$&\");\n  const normalizedString = escapedString.replace(/\\r\\n|\\r|\\n/g, \"\\\\\\\\n\");\n\n  return normalizedString;\n}\n\nexport function createRequestBody(\n  text: string,\n  { rpcids = defaultTranslateOptions.rpcids, from = defaultTranslateOptions.from, to = defaultTranslateOptions.to }: CreateRequestBodyOptions = {},\n): string {\n  const normalizedText = escapeSpecialSymbols(text.trim());\n  const encodedData = encodeURIComponent(`[[[\"${rpcids}\",\"[[\\\\\"${normalizedText}\\\\\",\\\\\"${from}\\\\\",\\\\\"${to}\\\\\",1],[]]\",null,\"generic\"]]]`);\n\n  return `f.req=${encodedData}&`;\n}\n", "import { createRequestBody } from \"./createRequestBody\";\nimport { defaultTranslateOptions } from \"./defaultTranslateOptions\";\nimport { generateRequestUrl } from \"./generateRequestUrl\";\nimport { normaliseResponse } from \"./normaliseResponse\";\nimport { BrowserTranslateOptions } from \"./types/BrowserTranslateOptions\";\nimport { TranslationResult } from \"./types/TranslationResult\";\n\nexport async function translate(text: string, options: BrowserTranslateOptions = {}): Promise<TranslationResult> {\n  const translateOptions: BrowserTranslateOptions = { raw: false, corsUrl: \"\", ...defaultTranslateOptions, ...options };\n\n  const body = createRequestBody(text, translateOptions);\n  const url = generateRequestUrl(translateOptions);\n\n  const response = await fetch(`${options.corsUrl}${url}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      ...translateOptions.headers,\n    },\n    body,\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Request failed\");\n  }\n\n  return normaliseResponse(await response.text(), translateOptions.raw);\n}\n", "import { generateRequestUrl } from \"./generateRequestUrl\";\nimport { isLanguageSupported } from \"./isLanguageSupported\";\nimport { normaliseResponse } from \"./normaliseResponse\";\nimport { translate } from \"./translate.browser\";\nimport { createRequestBody } from \"./createRequestBody\";\n\nexport { isLanguageSupported, translate, normaliseResponse, generateRequestUrl, createRequestBody };\n\nexport default translate;\n"],
  "mappings": "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",
  "names": ["__webpack_require__", "exports", "definition", "key", "o", "Object", "defineProperty", "enumerable", "get", "obj", "prop", "prototype", "hasOwnProperty", "call", "defaultTranslateOptions", "from", "to", "hl", "tld", "rpcids", "generateRequestUrl", "a", "e", "r", "c", "Boolean", "match", "Error", "searchParams", "URLSearchParams", "auto", "af", "sq", "am", "ar", "hy", "az", "eu", "be", "bn", "bs", "bg", "ca", "ceb", "ny", "zh", "co", "hr", "cs", "da", "nl", "en", "eo", "et", "tl", "fi", "fr", "fy", "gl", "ka", "de", "el", "gu", "ht", "ha", "haw", "he", "iw", "hi", "hmn", "hu", "is", "ig", "id", "ga", "it", "ja", "jw", "kn", "kk", "km", "rw", "ko", "ku", "ky", "lo", "la", "lv", "lt", "lb", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "or", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sm", "gd", "sr", "st", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tg", "ta", "tt", "te", "th", "tr", "tk", "uk", "ur", "ug", "uz", "vi", "cy", "xh", "yi", "yo", "zu", "isLanguageSupported", "desiredLang", "normaliseResponse", "rawBody", "raw", "data", "content", "JSON", "parse", "replace", "result", "text", "reduce", "fullText", "textBlock", "pronunciation", "language", "didYouMean", "iso", "autoCorrected", "value", "createRequestBody", "t", "i", "s", "normalizedText", "trim", "encodedData", "encodeURIComponent", "n", "translate", "options", "u", "h", "d", "l", "translateOptions", "corsUrl", "body", "url", "fetch", "method", "headers", "response", "ok"]
}
